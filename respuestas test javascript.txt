const clients = [
  {
    id: 1,
    taxNumber: "86620855",
    name: "HECTOR ACUÑA BOLAÑOS"
  },
  {
    id: 2,
    taxNumber: "7317855K",
    name: "JESUS RODRIGUEZ ALVAREZ"
  },
  {
    id: 3,
    taxNumber: "73826497",
    name: "ANDRES NADAL MOLINA"
  },
  {
    id: 4,
    taxNumber: "88587715",
    name: "SALVADOR ARNEDO MANRIQUEZ"
  },
  {
    id: 5,
    taxNumber: "94020190",
    name: "VICTOR MANUEL ROJAS LUCAS"
  },
  {
    id: 6,
    taxNumber: "99804238",
    name: "MOHAMED FERRE SAMPER"
  }
];
const accounts = [
  {
    clientId: 6,
    bankId: 1,
    balance: 15000
  },
  {
    clientId: 1,
    bankId: 3,
    balance: 18000
  },
  {
    clientId: 5,
    bankId: 3,
    balance: 135000
  },
  {
    clientId: 2,
    bankId: 2,
    balance: 5600
  },
  {
    clientId: 3,
    bankId: 1,
    balance: 23000
  },
  {
    clientId: 5,
    bankId: 2,
    balance: 15000
  },
  {
    clientId: 3,
    bankId: 3,
    balance: 45900
  },
  {
    clientId: 2,
    bankId: 3,
    balance: 19000
  },
  {
    clientId: 4,
    bankId: 3,
    balance: 51000
  },
  {
    clientId: 5,
    bankId: 1,
    balance: 89000
  },
  {
    clientId: 1,
    bankId: 2,
    balance: 1600
  },
  {
    clientId: 5,
    bankId: 3,
    balance: 37500
  },
  {
    clientId: 6,
    bankId: 1,
    balance: 19200
  },
  {
    clientId: 2,
    bankId: 3,
    balance: 10000
  },
  {
    clientId: 3,
    bankId: 2,
    balance: 5400
  },
  {
    clientId: 3,
    bankId: 1,
    balance: 9000
  },
  {
    clientId: 4,
    bankId: 3,
    balance: 13500
  },
  {
    clientId: 2,
    bankId: 1,
    balance: 38200
  },
  {
    clientId: 5,
    bankId: 2,
    balance: 17000
  },
  {
    clientId: 1,
    bankId: 3,
    balance: 1000
  },
  {
    clientId: 5,
    bankId: 2,
    balance: 600
  },
  {
    clientId: 6,
    bankId: 1,
    balance: 16200
  },
  {
    clientId: 2,
    bankId: 2,
    balance: 10000
  }
];
const banks = [
  {
    id: 1,
    name: "SANTANDER"
  },
  {
    id: 2,
    name: "CHILE"
  },
  {
    id: 3,
    name: "ESTADO"
  }
];

//0

let listClientsIds = ()=> {
  let clientIdsArray = [];
  clients.forEach( client => {
    clientIdsArray.push(client["id"]);
  });
  return clientIdsArray;
}
console.log("Pregunta 0");
console.log(listClientsIds());

// 1

let listClientsIdsSortByTaxNumber = ()=> {
  let IdsOrdenadosPorTaxNumber = [];
  let clientIdsArray = clients.sort((a, b) => parseInt(a.taxNumber) - parseInt(b.taxNumber));
  clientIdsArray.forEach((el) => {
    IdsOrdenadosPorTaxNumber.push(el["id"]);
  });
  return IdsOrdenadosPorTaxNumber;
}

console.log("Pregunta 1");
console.log(listClientsIdsSortByTaxNumber());

//2

let sortClientsTotalBalances = ()=> {
  let mixed = [];
  let descendingSortedNames = [];

  clients.forEach((e, i) => {
    let id = e.id;
    let total = 0;

    accounts.forEach((e) => {
      e.clientId === id ? (total += e.balance) : void(0);
    });

    mixed.push({ name: e.name, total: total });
  });

  mixed.sort( (a, b) =>  b.total - a.total);

  mixed.forEach((e) => {
    descendingSortedNames.push(e.name);
  });

  return descendingSortedNames;
}


console.log("Pregunta 2");
console.log(sortClientsTotalBalances());

// 3

let banksClientsTaxNumbers = ()=> {
  let banksAndTaxNumbers = {};

  banks.forEach((banco) => {
    let id = banco.id;
    const taxNumberArray = [];

    accounts.forEach((cuenta) => {
      if (cuenta.bankId === id) {
        let clientId = cuenta.clientId;
        let accounts_clients_match = clients.find(e => e.id === clientId);
        let taxNumber = accounts_clients_match.taxNumber;
        if(taxNumberArray.indexOf(taxNumber) ===-1){
          taxNumberArray.push(taxNumber);
        }
      } 
    });
    banksAndTaxNumbers[banco.name] = taxNumberArray.sort()
  });

  return banksAndTaxNumbers;
}

console.log("Pregunta 3");
console.log(banksClientsTaxNumbers());


let richClientsBalances = ()=>{
  let richClientsTotalBalance = [];
  let santanderAccounts = accounts.filter( e => e.bankId === 1);
  let richClients = santanderAccounts.filter(e => e.balance >= 25000);
  richClients.sort( (a, b) =>  b.balance - a.balance);
  richClients.forEach( e => richClientsTotalBalance.push(e.balance))
  return richClientsTotalBalance
}

console.log('Pregunta 4');
console.log(richClientsBalances());

let banksRankingByTotalBalance = ()=>{
  let idAndTotalArr = [];
  const ascendingIds = [];
  banks.forEach((banco)=>{
    let total = 0
    accounts.forEach((cuenta)=>{
      banco.id === cuenta.bankId ? (total += cuenta.balance) : void(0);
    });    
    idAndTotalArr.push({id:banco.id, total:total});
  });

  idAndTotalArr.sort( (a, b) =>  a.total - b.total);

  idAndTotalArr.forEach(e => ascendingIds.push(e.id))
 return ascendingIds
}

console.log('Pregunta 5');
console.log(banksRankingByTotalBalance());


let banksFidelity = ()=>{
  let objFidelity = {};

  banks.forEach((bank)=>{
    let cantidadClientes = 0
    accounts.forEach((cuentas)=>{      
      bank.id === cuentas.bankId ? cantidadClientes++ : void(0);
    });
    objFidelity[bank.name] = cantidadClientes;

  });
  return objFidelity;
}

console.log('Pregunta 6');
console.log(banksFidelity());


let banksPoorClients = ()=>{
  let objPoorClients = {}

  banks.forEach((bank)=>{
    
    let poorClientArray = [];
    accounts.forEach((cuenta)=>{
      if(bank.id === cuenta.bankId){
        poorClientArray.push(cuenta.balance)
      }
    });
    poorClientArray.sort( (a,b)=> a-b);
    let poorest = accounts.filter((cuenta)=>{
      return cuenta.balance === poorClientArray[0]
    });

    objPoorClients[bank.name] = poorest[0].clientId;
  });

  return objPoorClients;
}

console.log('Pregunta 7');
console.log(banksPoorClients());


let newClientRanking = ()=>{

  let julio = {
    id: 7,
    taxNumber:"259756820",
    name: "JULIO RODRIGUEZ"
  }
  clients.push(julio);

  let account = {
    clientId:7,
    bankId:3,
    balance:9000
  }
  
  accounts.push(account);

  let nuevoCliente = sortClientsTotalBalances();
  return nuevoCliente
}

console.log('Pregunta 8');
console.log(newClientRanking());
